import{d as c,p as l}from"./index-DE_6btFM.js";const o="http://localhost:4000/api",n=c(l(r=>({isAuthenticated:!1,admin:null,token:null,licenses:[],sales:[],users:[],login:async e=>{try{const s=await(await fetch(`${o}/admin/login`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json();return s.token?(r({isAuthenticated:!0,admin:s.adminWithoutPassword,token:s.token}),!0):!1}catch(t){return console.error("Login failed:",t),!1}},logout:()=>{r({isAuthenticated:!1,admin:null,token:null})},fetchLicenses:async()=>{try{const e=await fetch(`${o}/admin/licenses`,{headers:{Authorization:`Bearer ${n.getState().token}`}});if(!e.ok)throw new Error("Failed to fetch licenses");const s=(await e.json()).map(a=>({...a,purchaseDate:new Date(a.purchaseDate).toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"}),soldDate:a.soldDate?new Date(a.soldDate).toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"}):null,lastDeactivated:a.lastDeactivated?new Date(a.lastDeactivated).toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"}):null}));r({licenses:s})}catch(e){console.error("Error fetching licenses:",e),r({licenses:[]})}},fetchSales:async()=>{try{const e=await fetch(`${o}/admin/sales`,{headers:{Authorization:`Bearer ${n.getState().token}`}});if(!e.ok)throw new Error("Failed to fetch sales");const t=await e.json();r({sales:t})}catch(e){console.error("Error fetching sales:",e),r({sales:[]})}},fetchUsers:async()=>{try{const e=await fetch(`${o}/admin/users`,{headers:{Authorization:`Bearer ${n.getState().token}`}});if(!e.ok)throw new Error("Failed to fetch users");const t=await e.json();r({users:t})}catch(e){console.error("Error fetching users:",e),r({users:[]})}},revokeLicense:async e=>{try{const t=await fetch(`${o}/admin/licenses/${e}/deactivate`,{method:"POST",headers:{Authorization:`Bearer ${n.getState().token}`}});if(!t.ok)throw new Error("Failed to revoke license");(await t.json()).success&&r(a=>({licenses:a.licenses.map(i=>i.id===e?{...i,status:"deactivated"}:i)}))}catch(t){console.error("Error revoking license:",t)}},addLicense:async e=>{try{const t=await fetch(`${o}/admin/licenses`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${n.getState().token}`},body:JSON.stringify({licenses:e})});if(!t.ok)throw new Error("Failed to add licenses");(await t.json()).success&&await r(a=>({...a})).fetchLicenses()}catch(t){console.error("Error adding licenses:",t)}}}),{name:"admin-storage"}));export{n as u};
