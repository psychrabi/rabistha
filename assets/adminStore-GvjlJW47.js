import{f as c,p as h}from"./index-BSV5OHTS.js";const n="http://localhost:4000/api",r=c(h(o=>({isAuthenticated:!1,admin:null,token:null,licenses:[],sales:[],users:[],wikis:[],faqs:[],quotes:[],categories:[],login:async e=>{try{const s=await(await fetch("http://localhost:4000/api/admin/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).json();return s.token?(o({isAuthenticated:!0,admin:s.adminWithoutPassword,token:s.token}),!0):!1}catch(t){return console.error("Login failed:",t),!1}},logout:()=>{o({isAuthenticated:!1,admin:null,token:null})},fetchLicenses:async()=>{try{const e=await fetch(`${n}/admin/licenses`,{headers:{Authorization:`Bearer ${r.getState().token}`}});if(!e.ok)throw new Error("Failed to fetch licenses");const s=(await e.json()).map(a=>({...a,purchaseDate:new Date(a.purchaseDate).toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"}),soldDate:a.soldDate?new Date(a.soldDate).toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"}):null,lastDeactivated:a.lastDeactivated?new Date(a.lastDeactivated).toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"}):null}));o({licenses:s})}catch(e){console.error("Error fetching licenses:",e),o({licenses:[]})}},fetchWikis:async()=>{try{const t=await(await fetch("http://localhost:4000/api/wikis",{headers:{Authorization:`Bearer ${r.getState().token}`}})).json();o({wikis:t})}catch(e){console.error("Error fetching wikis:",e)}},fetchFAQs:async()=>{try{const t=await(await fetch("http://localhost:4000/api/faqs")).json();console.log(t),o({faqs:t})}catch(e){console.error("Error fetching faqs:",e)}},fetchCategories:async()=>{try{const t=await(await fetch("http://localhost:4000/api/categories")).json();console.log(t),o({categories:t})}catch(e){console.error("Error fetching categories:",e)}},fetchQuotes:async()=>{try{const t=await(await fetch("http://localhost:4000/api/admin/quotes",{headers:{Authorization:`Bearer ${r.getState().token}`}})).json();o({quotes:t})}catch(e){console.error("Error fetching quotes:",e)}},deleteWiki:async e=>{confirm("Are you sure you want to delete this wiki?")&&await fetch(`http://localhost:4000/api/admin/wikis/${e.id}`,{method:"DELETE",headers:{Authorization:`Bearer ${r.getState().token}`}})},deleteFAQ:async e=>{confirm("Are you sure you want to delete this faq?")&&await fetch(`http://localhost:4000/api/admin/faqs/${e.id}`,{method:"DELETE",headers:{Authorization:`Bearer ${r.getState().token}`}})},fetchSales:async()=>{try{const e=await fetch(`${n}/admin/sales`,{headers:{Authorization:`Bearer ${r.getState().token}`}});if(!e.ok)throw new Error("Failed to fetch sales");const t=await e.json();o({sales:t})}catch(e){console.error("Error fetching sales:",e),o({sales:[]})}},fetchUsers:async()=>{try{const e=await fetch(`${n}/admin/users`,{headers:{Authorization:`Bearer ${r.getState().token}`}});if(!e.ok)throw new Error("Failed to fetch users");const t=await e.json();o({users:t})}catch(e){console.error("Error fetching users:",e),o({users:[]})}},revokeLicense:async e=>{try{const t=await fetch(`${n}/admin/licenses/${e}/deactivate`,{method:"POST",headers:{Authorization:`Bearer ${r.getState().token}`}});if(!t.ok)throw new Error("Failed to revoke license");(await t.json()).success&&o(a=>({licenses:a.licenses.map(i=>i.id===e?{...i,status:"deactivated"}:i)}))}catch(t){console.error("Error revoking license:",t)}},addLicense:async e=>{try{const t=await fetch(`${n}/admin/licenses`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${r.getState().token}`},body:JSON.stringify({licenses:e})});if(!t.ok)throw new Error("Failed to add licenses");(await t.json()).success&&await o(a=>({...a})).fetchLicenses()}catch(t){console.error("Error adding licenses:",t)}}}),{name:"admin-storage"}));export{r as u};
