// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LicenseStatus {
  deactivated
  sold
  refunded
  expired
  available
}

model Admin {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
}

// User/customer info (for license sales)
model User {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  address       String?
  contact       String?
  country       String?
  city          String?
  state         String?
  zipCode       String?
  quoteInvoices QuoteInvoice[] // Added relation field for QuoteInvoice
  licenses      License[]
  sales         Sale[] // Added relation field for Sale
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

// License keys and their status
model License {
  id                 Int           @id @default(autoincrement())
  license            String        @unique
  type               String
  noOfUsers          Int?
  costPrice          Float
  salesPrice         Float?
  discount           Float?         @default(0)
  status             LicenseStatus // sold, deactivated, refunded, or "-" (not sold)
  purchaseDate       DateTime
  soldDate           DateTime?
  lastDeactivated    DateTime?
  noOfDeactivation   Int?           @default(0)
  replacementLicense String?
  sale               Sale?
  saleId             Int?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  User               User?         @relation(fields: [userId], references: [id])
  userId             Int?
}

// Sale record for a license
model Sale {
  id             Int      @id @default(autoincrement())
  license        License  @relation(fields: [licenseId], references: [id])
  licenseId      Int      @unique
  userId         Int
  user           User     @relation(fields: [userId], references: [id])
  paymentMethod  String
  paymentDetails String?
  shippingEmail  String
  soldDate       DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// For manual quotes/invoices sent to customers
model QuoteInvoice {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  licenseType String
  type        String // "quote" or "invoice"
  price       Float
  message     String?
  sentAt      DateTime @default(now())
}


model Wiki {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.Text
  slug      String   @unique
  category  String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Faq {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.Text
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}