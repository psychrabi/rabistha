// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum ProductType {
  ANNUAL_2
  ANNUAL_3
  ANNUAL_5
  PRO_2
  PRO_3
  PRO_6
  PRO_12_USB
  PRO_12_EDU
}

enum LicenseStatus {
  DEACTIVATED
  SOLD
  REFUNDED
  EXPIRED
  AVAILABLE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum QuotationStatus {
  DRAFT
  SENT
  ACCEPTED
  EXPIRED
  REJECTED
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  firstName String
  lastName  String
  role      UserRole  @default(USER)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  orders    Order[]
  licenses  License[]
  sales     Sale[]
  quotations Quotation[]
}

model License {
  id          String        @id @default(uuid())
  licenseKey  String        @unique
  productId   String
  product     Product       @relation(fields: [productId], references: [id])
  seats       Int
  price       Float
  isActive    Boolean       @default(true)
  status      LicenseStatus @default(AVAILABLE)
  expiresAt   DateTime?
  userId      String?
  user        User?         @relation(fields: [userId], references: [id])
  orderId     String?
  order       Order?        @relation(fields: [orderId], references: [id])
  saleId      String?       @unique
  sale        Sale?         @relation(fields: [saleId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Sale {
  id             String    @id @default(uuid())
  licenses        License[]
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  salesPrice     Float?
  discount       Float?    @default(0)
  paymentMethod  String
  paymentDetails String?
  shippingEmail  String
  soldDate       DateTime?
  paymentStatus  String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Order {
  id          String      @id @default(uuid())
  orderNumber String      @unique
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  status      OrderStatus @default(PENDING)
  totalAmount Float
  currency    String      @default("USD")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  licenses    License[]
  invoices    Invoice[]
  quotations  Quotation[]
}

model Invoice {
  id            String        @id @default(uuid())
  invoiceNumber String        @unique
  orderId       String
  order         Order         @relation(fields: [orderId], references: [id])
  status        InvoiceStatus @default(DRAFT)
  amount        Float
  currency      String        @default("USD")
  dueDate       DateTime
  sentAt        DateTime?
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Quotation {
  id              String          @id @default(uuid())
  quotationNumber String          @unique
  orderId         String
  order           Order           @relation(fields: [orderId], references: [id])
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  items           Json            // [{ description, quantity, price }]
  subTotal        Float           @default(0)
  discount        Float           @default(0)
  discountType    String          // "amount" or "percent"
  taxable         Float           @default(0)
  tax             Float           @default(0)
  total           Float           @default(0)
  price           Float           @default(0)
  message         String?
  notes           String?
  validUntil      DateTime
  status          QuotationStatus @default(DRAFT)
  sentAt          DateTime?
  acceptedAt      DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model WikiPage {
  id        String   @id @default(uuid())
  title     String
  slug      String   @unique
  content   String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FAQ {
  id        String   @id @default(uuid())
  question  String
  answer    String
  category  String?
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Settings {
  id          String @id @default(uuid())
  key         String @unique
  value       String
  description String?
}


model Product {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  seats       Int
  price       Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  licenses    License[]
}